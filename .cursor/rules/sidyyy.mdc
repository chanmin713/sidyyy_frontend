---
alwaysApply: true
---
# Sidyyy 프로젝트 개발 룰

## 📁 폴더 구조

프로젝트의 현재 폴더 구조는 `src/` 디렉토리를 확인하여 파악하세요. 
각 폴더의 역할과 포함된 컴포넌트들을 정확히 파악한 후 작업하세요.

## 📚 문서 참고 필수 (CRITICAL)

### 🚨 작업 시작 전 반드시 문서 확인

**모든 개발 작업 전에 `docs/` 폴더의 다음 문서들을 반드시 읽고 참고하세요:**

#### 1. **`docs/todo.md`** - 프로젝트 현황 및 우선순위
- ✅ **현재 구현된 기능들** 확인
- 📝 **구현해야 할 기능들** 우선순위 확인
- 🔧 **기술적 개선사항** 목록
- 📊 **프로젝트 상태** 요약

#### 2. **`docs/architecture.md`** - 아키텍처 가이드
- 🏗️ **전체 프로젝트 구조** 이해
- 🔄 **상태 관리** 패턴 (Zustand)
- ⚡ **성능 최적화** 기법
- 🔒 **보안 및 접근성** 가이드

#### 3. **`docs/components.md`** - 컴포넌트 가이드
- 🧩 **현재 구현된 컴포넌트** 사용법
- 🎯 **컴포넌트 선택 기준**
- 🎨 **스타일링** 가이드
- ♿ **접근성** 구현 방법

#### 4. **`docs/development.md`** - 개발 가이드
- 🚀 **개발 환경 설정**
- 📝 **코딩 컨벤션**
- 🧪 **테스트 작성** 방법
- 🔧 **Git 워크플로우**

#### 5. **`docs/backend/`** - 백엔드 개발 가이드 (나중에 백엔드 개발 시 참고)
- **`backend/README.md`** - 백엔드 문서 개요
- **`backend/api/`** - API 개발 가이드
- **`backend/database/`** - 데이터베이스 가이드
- **`backend/auth/`** - 인증 및 권한 관리

### 📋 문서 활용 체크리스트

**작업 시작 전 다음을 확인하세요:**

- [ ] `docs/todo.md`에서 현재 프로젝트 상태와 우선순위를 확인했는가?
- [ ] `docs/architecture.md`에서 아키텍처 패턴을 확인했는가?
- [ ] `docs/components.md`에서 컴포넌트 사용법을 확인했는가?
- [ ] `docs/development.md`에서 개발 가이드를 확인했는가?
- [ ] 접근성, 보안, 성능 최적화 가이드라인을 확인했는가?

### 🎯 작업별 필수 문서

#### 새 컴포넌트 작성 시
1. `docs/architecture.md` - 아키텍처 패턴 참고
2. `docs/components.md` - 컴포넌트 사용법 참고
3. `docs/todo.md` - 현재 상태 확인

#### 새 페이지 작성 시
1. `docs/todo.md` - 우선순위 및 현재 상태 확인
2. `docs/architecture.md` - 페이지 구조 참고
3. `docs/development.md` - 개발 가이드 확인

#### 상태 관리 작업 시
1. `docs/architecture.md` - Zustand 패턴 참고
2. `docs/development.md` - 코딩 컨벤션 참고
3. `docs/todo.md` - 현재 상태 확인

#### 성능 최적화 시
1. `docs/architecture.md` - 성능 최적화 기법 참고
2. `docs/development.md` - 개발 가이드 참고
3. `docs/todo.md` - 현재 상태 확인

#### 백엔드 개발 시
1. `docs/backend/README.md` - 백엔드 문서 개요 참고
2. `docs/backend/api/` - API 개발 가이드 참고
3. `docs/backend/database/` - 데이터베이스 가이드 참고
4. `docs/backend/auth/` - 인증 및 권한 관리 참고

## 🧩 컴포넌트 작성 규칙

### 컴포넌트 구조

```tsx
// 1. React imports
import { memo, useState, useEffect } from 'react';

// 2. Third-party imports
import { useNavigate } from 'react-router-dom';

// 3. Internal imports (절대 경로 사용)
import { ProfileSection } from '@/components/common/ProfileSection';
import { useUI } from '@/stores';

// 4. Types
interface ComponentProps {
  // props 정의
}

// 5. Component
export const ComponentName = memo(function ComponentName({
  prop1,
  prop2,
}: ComponentProps) {
  // 6. Hooks
  const navigate = useNavigate();
  const { someState } = useUI();

  // 7. Local state
  const [localState, setLocalState] = useState('');

  // 8. Effects
  useEffect(() => {
    // effect logic
  }, []);

  // 9. Event handlers
  const handleClick = () => {
    // handler logic
  };

  // 10. Render helpers
  const renderContent = () => {
    // helper functions
  };

  // 11. JSX
  return <div>{/* JSX content */}</div>;
});
```

### 이벤트 핸들러 네이밍

- **`handle` 접두사 사용**: `handleClick`, `handleSubmit`
- **명확한 동작 설명**: `handleUserProfileClick`, `handleProjectLike`
- **이벤트 객체는 `e` 사용**: `(e: React.MouseEvent)`

## 🔄 상태 관리 (Zustand)

### 스토어 구조

```tsx
// stores/useExampleStore.ts
import { create } from 'zustand';
import { devtools } from 'zustand/middleware';

export const useExampleStore = create<ExampleState>()(
  devtools(
    (set, get) => ({
      // 1. State
      data: [],
      loading: false,

      // 2. Actions
      setData: data => set({ data }),
      setLoading: loading => set({ loading }),

      // 3. Async actions
      fetchData: async () => {
        set({ loading: true });
        try {
          const data = await api.getData();
          set({ data, loading: false });
        } catch (error) {
          set({ loading: false });
          throw error;
        }
      },
    }),
    { name: 'example-store' }
  )
);
```

### 정규화된 스토어 (Normalized Store)

```tsx
// stores/useNormalizedStore.ts
import { createNormalizedStore } from './useNormalizedStore';

// 정규화된 데이터 관리 (CRUD, 필터링, 검색, 페이지네이션 포함)
export const useProjectStore = createNormalizedStore<Project>(
  'project-store',
  ['name', 'description', 'category'],
  20
);
```

### 현재 구현된 스토어들

- **`useUserStore`**: 사용자 인증 및 프로필 관리
- **`useSearchStore`**: 검색 쿼리 및 필터 상태
- **`useUIStore`**: UI 상태 (사이드바, 모달 등)
- **`useNotificationStore`**: 알림 관리
- **`useLanguageStore`**: 다국어 지원
- **`useThemeStore`**: 다크모드 테마 관리 (라이트/다크/시스템)
- **`useNormalizedStore`**: 정규화된 데이터 관리 (재사용 가능)

### 상태 분리 원칙

- **도메인별 분리**: `useUserStore`, `useSearchStore`, `useUIStore`
- **관련 상태는 함께 관리**: 검색 쿼리와 필터는 같은 스토어
- **UI 상태와 비즈니스 로직 분리**: `useUIStore` vs `useUserStore`
- **정규화된 데이터**: 복잡한 관계형 데이터는 정규화된 스토어 사용

## 📝 타입 정의 규칙

### 타입 네이밍

- **인터페이스**: `PascalCase` (예: `UserProfile`, `ProjectCard`)
- **타입 별칭**: `PascalCase` (예: `SortOption`, `FilterOption`)
- **제네릭**: `T`, `K`, `V` 또는 의미있는 이름 (예: `TData`, `TKey`)

### 타입 재사용

- **공통 타입은 `types/common.ts`에 정의**
- **도메인별 타입은 해당 폴더에 정의**
- **유틸리티 타입 활용**: `Partial<T>`, `Pick<T, K>`, `Omit<T, K>`

## 🛠️ 유틸리티 및 훅 작성 규칙

### 유틸리티 분리 기준

- **3개 이상 컴포넌트에서 사용**: 별도 유틸리티로 분리
- **복잡한 로직**: 별도 함수로 분리
- **재사용 가능한 로직**: 커스텀 훅으로 분리

### 현재 구현된 유틸리티들

- **`accessibilityUtils.ts`**: ARIA 속성, 키보드 네비게이션, 포커스 관리
- **`securityUtils.ts`**: XSS 방지, SQL 인젝션 검사, 비밀번호 강도 검증
- **`seoUtils.ts`**: 메타데이터 생성, 구조화된 데이터, Open Graph
- **`normalizationUtils.ts`**: 정규화된 데이터 관리, CRUD 작업
- **`projectLogUtils.ts`**: 프로젝트 로그 번호 계산
- **`text-utils.ts`**: 텍스트 처리 및 포맷팅
- **`iconUtils.ts`**: 아이콘 관련 유틸리티
- **`statusUtils.ts`**: 상태 관련 유틸리티
- **`languageUtils.ts`**: 언어 관련 유틸리티
- **`cn.ts`**: Tailwind CSS 클래스 유틸리티

### 현재 구현된 훅들

- **`useSEO`**: 동적 SEO 메타데이터 설정
- **`useTranslation`**: 다국어 지원
- **`useNavigation`**: 라우팅 및 네비게이션
- **`useDropdown`**: 드롭다운 상태 관리
- **`useDebounce`**: 값 디바운싱
- **`useThrottle`**: 함수 스로틀링
- **`useNotificationHandling`**: 알림 처리

### JSDoc 주석 필수

```tsx
/**
 * 프로젝트별 로그 번호를 계산합니다
 * @param postId - 포스트 ID
 * @param category - 프로젝트 카테고리
 * @returns 로그 번호 (1부터 시작)
 */
export const getProjectLogNumber = (
  postId: string,
  category?: string
): number => {
  // 구현
};
```

## 🎨 스타일링 규칙

### Tailwind CSS 클래스 순서

1. **레이아웃**: `flex`, `grid`, `block`, `inline`
2. **위치**: `relative`, `absolute`, `fixed`
3. **크기**: `w-`, `h-`, `max-w-`, `min-h-`
4. **여백**: `m-`, `p-`, `space-`
5. **색상**: `bg-`, `text-`, `border-`
6. **타이포그래피**: `text-`, `font-`, `leading-`
7. **효과**: `shadow-`, `opacity-`, `transition-`
8. **반응형**: `sm:`, `md:`, `lg:`, `xl:`

### 커스텀 CSS 변수 사용

```css
:root {
  --card-padding: 44px;
  --container-padding: 24px;
  --header-height: 64px;
}
```

## 🏷️ 네이밍 컨벤션

### 파일명 규칙

- **컴포넌트**: `PascalCase.tsx` (예: `PostCard.tsx`)
- **훅**: `camelCase.ts` (예: `useProjectLogNumber.ts`)
- **유틸리티**: `camelCase.ts` (예: `projectUtils.ts`)
- **타입**: `camelCase.ts` (예: `postTypes.ts`)

### 변수명 규칙

- **변수/함수**: `camelCase` (예: `userName`, `handleClick`)
- **상수**: `UPPER_SNAKE_CASE` (예: `API_BASE_URL`)
- **타입/인터페이스**: `PascalCase` (예: `UserProfile`)
- **컴포넌트**: `PascalCase` (예: `PostCard`)

## ⚡ 성능 최적화

### React.memo 사용

- 무거운 컴포넌트에 memo 사용
- props가 자주 변경되지 않는 컴포넌트에 적용

### useMemo/useCallback 사용

- 복잡한 계산에 useMemo 사용
- 자식 컴포넌트에 전달하는 함수에 useCallback 사용

### 현재 구현된 최적화 기능들

- **`OptimizedImage`**: 이미지 지연 로딩 및 최적화
- **`VirtualizedList`**: 대용량 리스트 가상화
- **정규화된 스토어**: 효율적인 데이터 관리
- **SEO 최적화**: 동적 메타데이터 및 구조화된 데이터
- **접근성 최적화**: ARIA 속성 및 키보드 네비게이션
- **코드 스플리팅**: React.lazy를 사용한 페이지 지연 로딩
- **성능 모니터링**: Web Vitals 측정 및 분석

## 🚨 에러 처리

### API 에러 처리

```tsx
const fetchData = async () => {
  try {
    const data = await api.getData();
    setData(data);
  } catch (error) {
    console.error('Failed to fetch data:', error);
    setError('데이터를 불러오는데 실패했습니다.');
  }
};
```

### 폼 유효성 검사

```tsx
const [errors, setErrors] = useState<Record<string, string>>({});

const validateForm = (data: FormData) => {
  const newErrors: Record<string, string> = {};

  if (!data.title.trim()) {
    newErrors.title = '제목을 입력해주세요.';
  }

  setErrors(newErrors);
  return Object.keys(newErrors).length === 0;
};
```

## 🌐 다국어 지원 (i18n)

### 현재 구현된 기능들

- **i18next 기반**: React i18next를 사용한 다국어 지원
- **언어 감지**: 브라우저 언어 자동 감지
- **로컬 스토리지**: 언어 설정 영구 저장
- **언어 전환**: `LanguageSwitcher` 컴포넌트
- **번역 파일**: 한국어(ko), 영어(en) 지원
- **모듈화된 구조**: `src/i18n/`, `src/locales/` 폴더 구조

### 사용법

```tsx
import { useTranslation } from '@/hooks/useTranslation';

export const Component = () => {
  const { t } = useTranslation();
  
  return <h1>{t('common.loading')}</h1>;
};
```

## 🎨 스타일링 가이드

### Tailwind CSS 사용법

```tsx
// 기본 스타일링 예시
<div className="bg-white text-gray-900 border border-gray-200 rounded-lg p-4">
  <h1 className="text-xl font-bold text-gray-900">제목</h1>
  <p className="text-gray-600">설명</p>
</div>
```

### 반응형 디자인

```tsx
// 반응형 클래스 사용
<div className="w-full md:w-1/2 lg:w-1/3 p-4">
  <div className="text-sm md:text-base lg:text-lg">반응형 텍스트</div>
</div>
```

## 🔒 보안 및 접근성

### 보안 기능

- **XSS 방지**: 입력값 검증 및 이스케이프 처리
- **SQL 인젝션 방지**: 입력값 검증
- **비밀번호 강도 검증**: `SecureInput` 컴포넌트
- **안전한 입력**: `SecureInput` 컴포넌트로 모든 사용자 입력 처리
- **테마 보안**: 시스템 설정 기반 안전한 테마 전환

### 접근성 기능

- **ARIA 속성**: `AccessibleButton`, `AccessibleModal` 컴포넌트
- **키보드 네비게이션**: 모든 인터랙티브 요소 지원
- **포커스 관리**: 포커스 트랩 및 복원
- **스크린 리더 지원**: 적절한 라벨링 및 설명
- **접근성 테스트**: 자동화된 접근성 검사 도구 활용
- **모듈화된 유틸리티**: `src/utils/accessibility/` 폴더 구조

## 📋 체크리스트 (문서 참고 필수)

### 🚨 작업 시작 전 필수 체크

**모든 작업 전에 다음을 확인하세요:**

- [ ] **`docs/todo.md`** - 현재 프로젝트 상태와 우선순위를 확인했는가?
- [ ] **`docs/architecture/basic.md`** - 아키텍처 패턴을 확인했는가?
- [ ] **`docs/technical/`** - 관련 기술 문서를 확인했는가?
- [ ] **접근성, 보안, 성능 최적화** 가이드라인을 확인했는가?

### 🧩 새 컴포넌트 작성 시

**문서 참고:**
- [ ] **`docs/architecture/basic.md`** - 아키텍처 패턴 참고
- [ ] **`docs/technical/hooks.md`** - 훅 사용법 참고
- [ ] **`docs/todo.md`** - 현재 상태 확인

**구현 체크:**
- [ ] 단일 책임 원칙을 따르는가?
- [ ] Props 타입이 명확히 정의되었는가?
- [ ] 이벤트 핸들러가 `handle` 접두사를 사용하는가?
- [ ] React.memo가 필요한가?
- [ ] 재사용 가능한가?
- [ ] 접근성 가이드라인을 준수하는가?
- [ ] 보안 검증이 필요한 입력이 있다면 `SecureInput`을 사용하는가?

### 📄 새 페이지 작성 시

**문서 참고:**
- [ ] **`docs/todo.md`** - 우선순위 및 현재 상태 확인
- [ ] **`docs/architecture/basic.md`** - 페이지 구조 참고
- [ ] **`docs/technical/`** - 관련 기술 문서 확인
- [ ] **`docs/seo/BASIC_GUIDE.md`** - SEO 기본 가이드 참고

**구현 체크:**
- [ ] 라우트가 `App.tsx`에 등록되었는가?
- [ ] Layout에서 사이드바 표시 여부가 설정되었는가?
- [ ] 페이지별 액션 버튼이 적절히 설정되었는가?
- [ ] SEO 메타데이터가 설정되었는가?
- [ ] 다국어 지원이 구현되었는가?

### 🔄 새 상태 추가 시

**문서 참고:**
- [ ] **`docs/architecture/basic.md`** - Zustand 패턴 참고
- [ ] **`docs/technical/stores.md`** - 스토어 사용법 참고
- [ ] **`docs/todo.md`** - 현재 상태 확인

**구현 체크:**
- [ ] 적절한 스토어에 추가되었는가?
- [ ] 타입이 정의되었는가?
- [ ] 액션이 명확히 정의되었는가?
- [ ] devtools가 설정되었는가?
- [ ] 정규화된 데이터라면 `useNormalizedStore`를 고려했는가?

### 🛠️ 새 유틸리티 작성 시

**문서 참고:**
- [ ] **`docs/architecture/basic.md`** - 유틸리티 패턴 참고
- [ ] **`docs/technical/utils.md`** - 유틸리티 사용법 참고
- [ ] **`docs/todo.md`** - 현재 상태 확인

**구현 체크:**
- [ ] 3개 이상 컴포넌트에서 사용되는가?
- [ ] JSDoc 주석이 작성되었는가?
- [ ] 에러 처리가 포함되었는가?
- [ ] 보안 검증이 필요한가?
- [ ] 접근성을 고려했는가?

### ⚡ 성능 최적화 시

**문서 참고:**
- [ ] **`docs/architecture/advanced.md`** - 고급 최적화 기법 참고
- [ ] **`docs/technical/`** - 기술 문서 참고
- [ ] **`docs/seo/PERFORMANCE.md`** - SEO 성능 최적화 참고

### 🎯 SEO 작업 시

**문서 참고:**
- [ ] **`docs/seo/BASIC_GUIDE.md`** - SEO 기본 가이드 참고
- [ ] **`docs/seo/H1_OPTIMIZATION.md`** - H1 최적화 참고
- [ ] **`docs/architecture/advanced.md`** - SEO 아키텍처 참고

## 📝 문서 관리 규칙 (CRITICAL)

### 🚨 문서 참고 우선순위 (반드시 순서대로)

**모든 개발 작업 시 다음 순서로 문서를 참고하세요:**

#### 1단계: 프로젝트 현황 파악
1. **`docs/todo.md`** - 현재 프로젝트 상태와 다음 우선순위 확인
2. **`docs/architecture.md`** - 전체 아키텍처 이해

#### 2단계: 기술적 구현 방법 확인
3. **`docs/components.md`** - 컴포넌트 사용법 확인
4. **`docs/development.md`** - 개발 가이드 확인

#### 3단계: 특화된 가이드 참고
5. **`docs/backend/`** - 백엔드 개발 시

### 📋 문서 업데이트 규칙

#### todo.md 업데이트 시 주의사항
- **이미 구현된 기능은 제거**: 완료된 기능은 `✅ 완료된 기능들` 섹션으로 이동
- **진행 상황 반영**: 현재 프로젝트 상태를 정확히 반영하여 업데이트
- **우선순위 명확화**: 다음에 구현할 기능들의 우선순위를 명확히 표시
- **기술적 개선사항 분리**: 기능 구현과 기술적 개선사항을 구분하여 관리

#### 문서 동기화 체크리스트
- [ ] **`docs/todo.md`** - 현재 프로젝트 상태가 정확히 반영되었는가?
- [ ] **`docs/architecture.md`** - 아키텍처 패턴이 최신 코드와 일치하는가?
- [ ] **`docs/components.md`** - 컴포넌트 문서가 최신인가?
- [ ] **`docs/development.md`** - 개발 가이드가 최신인가?
- [ ] **`docs/backend/`** - 백엔드 문서가 최신인가?

### 🔄 문서 업데이트 주기

- **`docs/todo.md`**: 기능 구현 완료 시마다 즉시 업데이트
- **`docs/architecture.md`**: 아키텍처 변경 시 업데이트
- **`docs/components.md`**: 컴포넌트 변경 시 업데이트
- **`docs/development.md`**: 개발 환경 변경 시 업데이트
- **`docs/backend/`**: 백엔드 개발 시 업데이트

### ⚠️ 문서 참고 강제 규칙

**다음 상황에서는 반드시 해당 문서를 먼저 확인하세요:**

- **새 기능 구현 전**: `docs/todo.md` 확인 필수
- **컴포넌트 작업 전**: `docs/architecture.md` 확인 필수
- **아키텍처 변경 전**: `docs/architecture.md` 확인 필수
- **성능 최적화 전**: `docs/architecture.md` 확인 필수
- **백엔드 개발 전**: `docs/backend/` 폴더 확인 필수

## 🎯 Sidyyy 프로젝트 특화 규칙

### 프로젝트 개요
- **Sidyyy**: 사이드 프로젝트 공유 플랫폼
- **주요 기능**: 로그, 프로젝트, 모집, 멤버, DM, 검색, 알림
- **기술 스택**: React, TypeScript, Tailwind CSS, Zustand, i18next

### 현재 구현된 페이지들
- **`HomePage`**: 메인 페이지
- **`LogPage`**: 로그 페이지 (개발 로그)
- **`ProjectPage`**: 프로젝트 목록 페이지
- **`ProjectDetailPage`**: 프로젝트 상세 페이지
- **`RecruitPage`**: 모집 페이지
- **`MemberPage`**: 멤버 페이지
- **`ProfilePage`**: 내 프로필 페이지
- **`UserProfilePage`**: 다른 사용자 프로필 페이지
- **`MessagePage`**: DM 페이지
- **`PostDetailPage`**: 포스트 상세 페이지
- **`WritePostPage`**: 포스트 작성 페이지

### 현재 구현된 컴포넌트들
- **Layout**: `DesktopHeader`, `MobileHeader`, `Footer`, `RightSidebar`
- **Common**: `ProfileSection`, `FloatingWriteButton`, `ScrollToTopButton`
- **Post**: `PostCard`, `PostContent`, `CommentSection`
- **Project**: `ProjectComments`, `ProjectInteractions`, `ProjectPropertiesPanel`
- **UI**: `AccessibleButton`, `SecureInput`, `OptimizedImage`, `LoadingSpinner`

### 현재 구현된 스토어들
- **`useUserStore`**: 사용자 인증 및 프로필 관리
- **`useSearchStore`**: 검색 쿼리 및 필터 상태
- **`useUIStore`**: UI 상태 (사이드바, 모달 등)
- **`useNotificationStore`**: 알림 관리
- **`useNormalizedStore`**: 정규화된 데이터 관리

### Sidyyy 특화 개발 가이드

#### 1. 로그 관련 개발
- **로그 번호 계산**: `projectLogUtils.ts`의 `getProjectLogNumber` 사용
- **로그 템플릿**: 자주 사용하는 템플릿 저장 기능
- **로그 내보내기**: PDF, 이미지 등으로 내보내기 기능

#### 2. 프로젝트 관련 개발
- **프로젝트 상태**: `planning`, `in_progress`, `completed` 상태 관리
- **프로젝트 필터링**: 카테고리, 기술 스택, 상태별 필터
- **프로젝트 통계**: 조회수, 좋아요, 댓글 수 등

#### 3. 모집 관련 개발
- **모집 필터링**: 지역, 기술 스택, 경력 등
- **모집 상태 관리**: 모집중, 마감 등

#### 4. 멤버 관련 개발
- **멤버 상세 프로필**: 포트폴리오, 기술 스택, 경력
- **멤버 검색**: 기술 스택, 경력 등으로 검색

#### 5. DM 관련 개발
- **채팅방 UI**: 더 나은 채팅 인터페이스
- **메시지 관리**: 실시간 메시지 전송 및 수신

#### 6. 검색 관련 개발
- **검색 결과 페이지**: 검색 결과 표시 및 정렬
- **검색 히스토리**: 최근 검색어 저장
- **자동완성**: 검색어 자동완성 기능

#### 7. 알림 관련 개발
- **알림 UI**: 더 나은 알림 표시 및 관리
- **알림 타입**: 좋아요, 댓글, 팔로우 등

### 코드 수정 및 문서 업데이트 규칙

#### 코드 수정 시 필수 사항
1. **`docs/todo.md`** 업데이트 - 완료된 기능 제거, 새 기능 추가
2. **관련 문서 업데이트** - 변경된 기능에 대한 문서 수정
3. **타입 정의 업데이트** - 새로운 타입이나 인터페이스 추가 시
4. **테스트 코드 작성** - 새 기능에 대한 테스트 코드 작성

#### 문서 업데이트 시 필수 사항
1. **현재 프로젝트 상태 반영** - 실제 구현된 기능만 문서화
2. **사용법 예시 제공** - 실제 사용할 수 있는 코드 예시
3. **관련 문서 링크** - 다른 관련 문서와의 연결
4. **버전 정보 업데이트** - 문서 수정 날짜 및 버전 정보

### 개발 우선순위 (docs/todo.md 기준)
1. **사용자 인터페이스 개선** - 프로필 편집, 사용자 설정
2. **프로젝트 UI 개선** - 필터링, 검색, 상태 표시, 통계
3. **모집 UI 개선** - 필터링 기능
4. **멤버 UI 개선** - 상세 프로필
5. **DM UI 개선** - 채팅 인터페이스
6. **검색 UI 개선** - 결과 페이지, 히스토리, 자동완성
7. **알림 UI 개선** - 알림 표시 및 관리
8. **로그 UI 개선** - 템플릿, 내보내기
9. **소셜 UI 개선** - 공유, 좋아요, 해시태그
10. **고급 기능** - 실시간 알림, PWA, 오프라인 지원

## 📚 현재 문서 구조 (2024-12-19 업데이트)

```
docs/
├── README.md              # 프로젝트 개요 및 빠른 시작
├── todo.md               # 개발 진행 상황
├── components.md         # 컴포넌트 가이드 (통합)
├── architecture.md       # 아키텍처 가이드 (간소화)
├── development.md        # 개발 가이드 (간소화)
└── backend/              # 백엔드 개발 가이드 (복원)
    ├── README.md         # 백엔드 문서 개요
    ├── api/              # API 개발 가이드
    │   ├── README.md     # API 문서 개요
    │   └── rest.md       # REST API 가이드
    ├── auth/             # 인증 및 권한
    │   └── README.md     # 인증 문서
    └── database/         # 데이터베이스
        └── README.md     # 데이터베이스 문서
```

### 📊 문서 간소화 결과
- **이전**: 50개 이상의 복잡한 문서
- **현재**: 9개의 핵심 문서 (프론트엔드 5개 + 백엔드 4개)
- **관리 복잡도**: 대폭 감소
- **실용성**: 실제 코드 기반 문서로 개선
